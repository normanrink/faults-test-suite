cmake_minimum_required(VERSION 2.8)

# Require LLVM with builtins/intrinsics for encoding:
find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

# Define short-hands for a couple of LLVM's binaries:
set(CLANG     ${LLVM_INSTALL_PREFIX}/bin/clang)
set(CLANGXX   ${LLVM_INSTALL_PREFIX}/bin/clang++)
set(LLVM_LINK ${LLVM_INSTALL_PREFIX}/bin/llvm-link)
set(LLVM_DIS  ${LLVM_INSTALL_PREFIX}/bin/llvm-dis)
set(OPT       ${LLVM_INSTALL_PREFIX}/bin/opt)

# Ensure that clang is used for building: -- NOT CURRENTLY NEEDED
# set(CMAKE_C_COMPILER   ${CLANG})
# set(CMAKE_CXX_COMPILER ${CLANGXX})
# message("Using C compiler: ${CLANG}")
# message("Using C++ compiler: ${CLANGXX}")

# Variables for the configuration of test suites:
set(PIN_COMMAND  "" CACHE PATH "path to executable PIN tool")
set(BFI_SO_PATH  "" CACHE PATH "path to BFI plug-in for the PIN tool")
set(SUITE_FOLDER "" CACHE PATH "folder for output generated by tests")
set(WARM_UP_RUNS "10"  CACHE STRING "")
set(FI_RUNS      "100" CACHE STRING "")
set(VERI_RUNS    "1"   CACHE STRING "")

# Variables for building the test cases:
set(ENCODER           "" CACHE PATH "")
set(ENCODING_PROFILE  "" CACHE PATH "")

# Library of functions common to all test cases:
add_subdirectory(utility)
# Set variable 'BC_LIBS' to the folder where the bitcode
# libraries will be generated:
set(BC_LIBS ${CMAKE_CURRENT_BINARY_DIR}/utility)
# Set variable 'INC_LIBS' to the folder containing header
# files for the bitcode libraries:
set(INC_LIBS ${CMAKE_CURRENT_SOURCE_DIR}/utility)

add_subdirectory(transformations)
set(NO_ENC_INLINE_LIB
    ${CMAKE_CURRENT_BINARY_DIR}/transformations/libNoEncInline.so)

# Build the test cases:
add_subdirectory(tests)

# Generate configuration files for various test suites:
set(BINARIES_FOLDER ${CMAKE_CURRENT_BINARY_DIR}/tests)
add_subdirectory(configs)
